<?xml version="1.0" encoding="utf-8"?>
<!--
  Copyright (c) 2023 Matthias Wolf, Mawosoft.
-->
<Project Sdk="Microsoft.Build.NoTargets">

  <PropertyGroup>
    <TargetFramework>netstandard2.0</TargetFramework>
    <RestoreProjectStyle>DotnetToolReference</RestoreProjectStyle>
    <EnableGitCommitCount>false</EnableGitCommitCount>
  </PropertyGroup>

  <PropertyGroup>
    <DocFxToolPath>$([MSBuild]::NormalizePath($(Pkgdocfx), 'tools/net7.0/any/docfx.dll'))</DocFxToolPath>
    <DocFxConfigFile Condition="'$(DocFxConfigFile)' == ''">$([MSBuild]::NormalizePath($(MSBuildProjectDirectory), 'docfx.json'))</DocFxConfigFile>
    <DocFxOptions Condition="'$(CI)' == 'true'">$(DocFxOptions) --warningsAsErrors</DocFxOptions>
  </PropertyGroup>

  <ItemGroup>
    <MetaInput Include="$(DocFxConfigFile)" />
    <MetaInput Include="filter.yml" />
    <!-- None is not auto-populated for *.msbuildproj -->
    <None Include="@(MetaInput)" Exclude="@(None)" />
    <MetaInput Include="..\src\Mawosoft.PowerShell.WindowsSearchManager\*.cs" />
    <MetaOutputMarker Include="api\.manifest" />
    <ConvertInput Include="help\*.md" />
    <ConvertInput Include="api\toc.yml" />
    <ConvertOutput Include="@(ConvertInput->'reference\%(Filename)%(Extension)')" />
    <DocsInput Include="$(DocFxConfigFile)" />
    <DocsInput Include="*.yml" />
    <DocsInput Include="index.md" />
    <DocsInput Include="api\index.md" />
    <DocsInput Include="reference\index.md" />
    <DocsInput Include="templates\**\*" />
    <None Include="@(DocsInput)" Exclude="@(None)" />
    <DocsInput Include="@(MetaOutputMarker)" Exclude="@(DocsInput)" />
    <DocsInput Include="@(ConvertOutput)" Exclude="@(DocsInput)" />
    <DocsInput Include="api\**\*" Exclude="@(DocsInput)" />
    <DocsInput Include="reference\**\*" Exclude="@(DocsInput)" />
    <DocsOutputMarker Include="_site/manifest.json" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="docfx" PrivateAssets="all" GeneratePathProperty="true" />
  </ItemGroup>

  <ItemGroup>
    <!-- PackageVersion/CPM is ignored for DotnetToolReference style -->
    <PackageReference Update="@(PackageVersion)" Version="%(PackageVersion.Version)" />
    <!-- Apply possible VersionOverride as well to mimic CPM -->
    <PackageReference Update="@(PackageReference->HasMetadata('VersionOverride'))" Version="%(PackageReference.VersionOverride)" />
  </ItemGroup>

  <!--
    ============================================================

    GenerateMetadata
    ConvertPlatyPStoDocFxMarkdown
    GenerateDocs

    Generates API metadata via DocFx.
    Converts markdown help into reference (as conceptual doc).
    Builds docs website via DocFx.
    Targets are optimized to avoid unnecessary builds.

    ============================================================
  -->

  <Target Name="GenerateMetadata"
          Inputs="@(MetaInput)"
          Outputs="@(MetaOutputMarker)">
    <Exec Command="dotnet &quot;$(DocFxToolPath)&quot; metadata &quot;$(DocFxConfigFile)&quot; $(DocFxOptions) "
          WorkingDirectory = "$(MSBuildProjectDirectory)"
          CustomWarningRegularExpression = "\s+[1-9]\d* warning\(s\)"
          CustomErrorRegularExpression = "\s+[1-9]\d* error\(s\)"
          StandardErrorImportance="high"
          StandardOutputImportance="low" />
  </Target>

  <Target Name="ConvertPlatyPStoDocFxMarkdown"
          Inputs="@(ConvertInput)"
          Outputs="@(ConvertOutput)"
          DependsOnTargets="GenerateMetadata">
    <PropertyGroup>
      <_command>pwsh -NonInteractive -ExecutionPolicy Bypass -Command &quot;&amp;
        '../build/convertPlatyPStoDocFxMarkdown.ps1'
          -Path './help'
          -Destination './reference'
          -AdditionalTocPath './api/toc.yml'
          -ExcludeParameterMetadata @('Parameter Sets', 'Aliases', 'Required')
          -ExludeCommonParameters
          -ExcludeWhatifConfirm
          -ExludeSyntaxParameterSetHeading
          -BreakSyntaxThreshold 2
        &quot;
      </_command>
    </PropertyGroup>
    <Exec Command="$(_command.Replace('%0D%0A', ' ').Replace('%0A', ' '))"
          WorkingDirectory = "$(MSBuildProjectDirectory)"
          StandardErrorImportance="high"
          StandardOutputImportance="low" />
  </Target>

  <Target Name="GenerateDocs"
          Inputs="@(DocsInput)"
          Outputs="@(DocsOutputMarker)"
          AfterTargets="Compile"
          DependsOnTargets="GenerateMetadata;ConvertPlatyPStoDocFxMarkdown">
    <Exec Command="dotnet &quot;$(DocFxToolPath)&quot; build &quot;$(DocFxConfigFile)&quot; $(DocFxOptions) "
          WorkingDirectory = "$(MSBuildProjectDirectory)"
          CustomWarningRegularExpression = "\s+[1-9]\d* warning\(s\)"
          CustomErrorRegularExpression = "\s+[1-9]\d* error\(s\)"
          StandardErrorImportance="high"
          StandardOutputImportance="low" />
  </Target>

  <!--
    ============================================================

    CleanDocs

    Cleaning via recorded @(FileWrites)/@(FileWritesShareable) only works for files under
    $(IntermediateOutputPath) and $(OutDir). It's also not suitable for cleaning entire directories.
    ============================================================
  -->

  <Target Name="CleanDocs" BeforeTargets="CoreClean">
      <ItemGroup>
        <Clean Include="api/*" Exclude="api/index.md" />
        <Clean Include="@(ConvertOutput)" />
        <Clean Include="reference/includes/index-*.md" />
        <_CleanDir Include="_site" />
      </ItemGroup>
      <RemoveDir Directories="@(_CleanDir)" />
  </Target>

  <!--
    ============================================================

    RestoreForVStudio

    For some reason, VStudio is unable to restore projects with RestoreProjectStyle == DotnetToolReference.
    This runs an explicit restore when building inside VStudio and project.assets.json doesn't exist.
    TODO Changes to assets file are not recognized.
    ============================================================
  -->

  <Target Name="RestoreForVStudio"
          BeforeTargets="RunResolvePackageDependencies"
          Condition="'$(BuildingInsideVisualStudio)' == 'true' And !Exists('$(ProjectAssetsFile)')">
    <MSBuild Projects="$(MSBuildProjectFullPath)" Targets="Restore" />
  </Target>

</Project>
