<Project Sdk="Microsoft.Build.NoTargets">

  <PropertyGroup>
    <TargetFramework>netstandard2.0</TargetFramework>
    <RestoreProjectStyle>DotnetToolReference</RestoreProjectStyle>
    <EnableGitCommitCount>false</EnableGitCommitCount>
  </PropertyGroup>

  <PropertyGroup>
    <DocFxToolPath>$([MSBuild]::NormalizePath($(Pkgdocfx), 'tools/net7.0/any/docfx.dll'))</DocFxToolPath>
    <DocFxConfigFile Condition="'$(DocFxConfigFile)' == ''">$(MSBuildProjectDirectory)/docfx.json</DocFxConfigFile>
    <DocFxOptions Condition="'$(CI)' == 'true'">$(DocFxOptions) --warningsAsErrors</DocFxOptions>
  </PropertyGroup>

  <ItemGroup>
    <MarkdownHelp Include="help\*.md" />
    <MarkdownReference Include="@(MarkdownHelp->'reference\%(Filename)%(Extension)')" />
    <!-- Anything else generated under reference/** that may not yet exist depends on the on the ones above.
         Thus, it's safe here to use wildcards that only capture existing items. -->
    <DocFxInput Include="api\index.md" />
    <DocFxInput Include="reference\**\*" />
    <DocFxInput Include="templates\**\*" />
    <DocFxInput Include="*.yml" />
    <DocFxInput Include="index.md" />
    <DocFxInput Include="$(DocFxConfigFile)" />
    <!-- None is not auto-populated for *.msbuildproj -->
    <None Include="@(MarkdownHelp)" />
    <None Include="@(DocFxInput)" />
    <DocFxInput Include="@(MarkdownReference)" Exclude="@(DocFxInput)" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="docfx" PrivateAssets="all" GeneratePathProperty="true" />
  </ItemGroup>

  <ItemGroup>
    <!-- PackageVersion/CPM is ignored for DotnetToolReference style -->
    <PackageReference Update="@(PackageVersion)" Version="%(PackageVersion.Version)" />
    <!-- Apply possible VersionOverride as well to mimic CPM -->
    <PackageReference Update="@(PackageReference->HasMetadata('VersionOverride'))" Version="%(PackageReference.VersionOverride)" />
  </ItemGroup>

  <Target Name="ConvertPlatyPStoDocFxMarkdown"
          Inputs="@(MarkdownHelp)"
          Outputs="@(MarkdownReference)">
    <Exec Command="pwsh -NonInteractive -ExecutionPolicy Bypass -Command &quot;&amp; '../build/convertPlatyPStoDocFxMarkdown.ps1' -Path './help' -Destination './reference' &quot;"
          WorkingDirectory = "$(MSBuildProjectDirectory)"
          StandardErrorImportance="high"
          StandardOutputImportance="low" />
  </Target>

  <Target Name="GenerateDocs"
          Inputs="@(DocFxInput)"
          Outputs="_site/manifest.json"
          AfterTargets="Compile"
          DependsOnTargets="ConvertPlatyPStoDocFxMarkdown">
    <Exec Command="dotnet &quot;$(DocFxToolPath)&quot; &quot;$(DocFxConfigFile)&quot; $(DocFxOptions) "
          WorkingDirectory = "$(MSBuildProjectDirectory)"
          CustomWarningRegularExpression = "\s+[1-9]\d* warning\(s\)"
          CustomErrorRegularExpression = "\s+[1-9]\d* error\(s\)"
          StandardErrorImportance="high"
          StandardOutputImportance="low" />
  </Target>

  <!--
    ============================================================

    CleanDocs

    Cleaning via recorded @(FileWrites)/@(FileWritesShareable) only works for files under
    $(IntermediateOutputPath) and $(OutDir). It's also not suitable for cleaning entire directories.
    ============================================================
  -->

  <Target Name="CleanDocs" BeforeTargets="CoreClean">
      <ItemGroup>
        <Clean Include="@(MarkdownReference)" />
        <Clean Include="reference/includes/index-*.md" />
        <Clean Include="api/*.yml" />
        <Clean Include="api/.manifest" />
        <_CleanDir Include="_site" />
        <_CleanDir Include="$(BaseIntermediateOutputPath).cache" />
      </ItemGroup>
      <RemoveDir Directories="@(_CleanDir)" />
  </Target>

  <!--
    ============================================================

    RestoreForVStudio

    For some reason, VStudio is unable to restore projects with RestoreProjectStyle == DotnetToolReference.
    This runs an explicit restore when building inside VStudio and project.assets.json doesn't exist.
    TODO Changes to assets file are not recognized.
    ============================================================
  -->

  <Target Name="RestoreForVStudio"
          BeforeTargets="RunResolvePackageDependencies"
          Condition="'$(BuildingInsideVisualStudio)' == 'true' And !Exists('$(ProjectAssetsFile)')">
    <MSBuild Projects="$(MSBuildProjectFullPath)" Targets="Restore" />
  </Target>

</Project>
