# Copyright (c) 2023 Matthias Wolf, Mawosoft.

<#
.SYNOPSIS
    Updates the link to the online help in the markdown help generated by platyPS.
#>

#Requires -Version 7

using namespace System

[CmdletBinding(DefaultParameterSetName = 'BaseParameterSet')]
param(
    # Source directory containing the markdown help files created by platyPS
    [Parameter(Mandatory = $false, Position = 0)]
    [ValidateNotNullOrEmpty()]
    [string]$Path = "$PSScriptRoot/../help",

    # Well-known Base URI to select
    [Parameter(Mandatory = $true, ParameterSetName = 'BaseParameterSet')]
    [ValidateSet('repo', 'gh-pages')]
    [string]$Base,

    # A custom absolute Base URI including the subdirectory containing the help pages
    [Parameter(Mandatory = $true, Position = 1, ParameterSetName = 'BaseUriParameterSet')]
    [ValidateNotNullOrEmpty()]
    [string]$BaseUri,

    [Parameter(Mandatory = $true, ParameterSetName = 'BaseUriParameterSet')]
    [ValidateNotNullOrEmpty()]
    [string]$Extension,

    # Always write the output, even if content is unchanged.
    [switch]$WriteAlways
)

Set-StrictMode -Version 3.0
$ErrorActionPreference = 'Stop'

if (-not (Test-Path $Path -PathType Container)) {
    throw "Directory does not exist: $Path"
}

if (-not $BaseUri) {
    switch ($Base) {
        'repo' { 
            $BaseUri = 'https://github.com/mawosoft/WindowsSearchManager/blob/master/docs/help/'
            $Extension = '.md'
            break  
        }
        Default { 
            $BaseUri = 'https://mawosoft.github.io/WindowsSearchManager/'
            $Extension = '.html'
            break
        }
    }
}
if (-not $BaseUri.EndsWith('/', [StringComparison]::Ordinal)) { $BaseUri += '/' }
if (-not $Extension.StartsWith('.', [StringComparison]::Ordinal)) { $Extension = '.' + $Extension }

Join-Path $Path '*.md' | Get-ChildItem | ForEach-Object -Process {
    [string[]]$lines = Get-Content -Path $_
    [bool]$dirty = $false
    if ($lines -and $lines[0].Trim() -ceq '---') {
        [int]$n = [Math]::Min(30, $lines.Count)
        for ([int]$i = 1; $i -lt $n; $i++) {
            if ($lines[$i].Trim() -ceq '---') { break }
            if ($lines[$i].StartsWith('online version:', [StringComparison]::OrdinalIgnoreCase)) {
                [string]$link = 'online version: ' + $BaseUri + $_.BaseName + $Extension
                if ($link -cne $lines[$i]) { 
                    $lines[$i] = $link
                    $dirty = $true 
                }
                break
            }
        }
    }
    if ($WriteAlways -or $dirty) {
        $lines | Set-Content -Path  $_
    }
}
