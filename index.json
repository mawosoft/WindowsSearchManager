{
  "api/Mawosoft.PowerShell.WindowsSearchManager.SearchCatalogInfo.html": {
    "href": "api/Mawosoft.PowerShell.WindowsSearchManager.SearchCatalogInfo.html",
    "title": "Class SearchCatalogInfo | Windows Search Manager",
    "keywords": "Class SearchCatalogInfo Contains settings and status for a search catalog. Inheritance object SearchCatalogInfo Implements ICloneable Namespace: Mawosoft.PowerShell.WindowsSearchManager Assembly: Mawosoft.PowerShell.WindowsSearchManager.dll Syntax public sealed class SearchCatalogInfo : ICloneable Constructors SearchCatalogInfo() Initializes a new instance of the SearchCatalogInfo class. Declaration public SearchCatalogInfo() Properties Catalog Declaration public string? Catalog { get; set; } Property Value Type Description string The catalog name. ConnectTimeout Declaration public uint ConnectTimeout { get; set; } Property Value Type Description uint The time, in seconds, that the indexer should wait for a connection response from a server or data store. DataTimeout Declaration public uint DataTimeout { get; set; } Property Value Type Description uint The time, in seconds, that the indexer should wait for a data transaction. DiacriticSensitivity Declaration public bool DiacriticSensitivity { get; set; } Property Value Type Description bool true if the catalog should differentiate words with diacritics. false if the catalog should ignore diacritics. HighPriorityQueueCount Declaration public int HighPriorityQueueCount { get; } Property Value Type Description int The number of items in the high-priority queue. ItemCount Declaration public int ItemCount { get; } Property Value Type Description int The number of items in the catalog. ItemsToIndexCount Declaration public int ItemsToIndexCount { get; } Property Value Type Description int The number of items to be indexed during the next incremental crawl. NotificationQueueCount Declaration public int NotificationQueueCount { get; } Property Value Type Description int The number of items in the notification queue. PathBeingIndexed Declaration public string? PathBeingIndexed { get; } Property Value Type Description string The path currently being indexed. PausedReason Declaration public _CatalogPausedReason PausedReason { get; } Property Value Type Description _CatalogPausedReason One of the enumeration values that indicates why the catalog is paused. Status Declaration public _CatalogStatus Status { get; } Property Value Type Description _CatalogStatus One of the enumeration values that indicates the current catalog status. Methods Clone() Creates a shallow copy of the SearchCatalogInfo instance. Declaration public object Clone() Returns Type Description object A shallow copy of the SearchCatalogInfo instance. Implements ICloneable"
  },
  "api/Mawosoft.PowerShell.WindowsSearchManager.SearchManagerInfo.html": {
    "href": "api/Mawosoft.PowerShell.WindowsSearchManager.SearchManagerInfo.html",
    "title": "Class SearchManagerInfo | Windows Search Manager",
    "keywords": "Class SearchManagerInfo Contains the global settings and version information for Windows Search. Inheritance object SearchManagerInfo Implements ICloneable Namespace: Mawosoft.PowerShell.WindowsSearchManager Assembly: Mawosoft.PowerShell.WindowsSearchManager.dll Syntax public sealed class SearchManagerInfo : ICloneable Constructors SearchManagerInfo() Initializes a new instance of the SearchManagerInfo class. Declaration public SearchManagerInfo() Properties MajorVersion Declaration public uint MajorVersion { get; } Property Value Type Description uint The major version number of the indexer. MinorVersion Declaration public uint MinorVersion { get; } Property Value Type Description uint The minor version number of the indexer. ProxyAccess Declaration public _PROXY_ACCESS ProxyAccess { get; set; } Property Value Type Description _PROXY_ACCESS One of the enumeration values that indicates if and how a proxy server is used. ProxyBypassList Declaration public string? ProxyBypassList { get; set; } Property Value Type Description string A comma-separated list of items that are considered local by the indexer and are not to be accessed through a proxy server. ProxyBypassLocal Declaration public bool ProxyBypassLocal { get; set; } Property Value Type Description bool true if the proxy should be bypassed for local domains, false otherwise. ProxyName Declaration public string? ProxyName { get; set; } Property Value Type Description string The name of the proxy server. ProxyPortNumber Declaration public uint ProxyPortNumber { get; set; } Property Value Type Description uint The port number of the proxy server. UserAgent Declaration public string? UserAgent { get; set; } Property Value Type Description string The user agent string that a user agent passes to website and services to identify itself. Version Declaration public string? Version { get; } Property Value Type Description string The complete version number of the indexer. For Windows 10 and newer, this will typically match the OS version number. Methods Clone() Creates a shallow copy of the SearchManagerInfo instance. Declaration public object Clone() Returns Type Description object A shallow copy of the SearchManagerInfo instance. Implements ICloneable"
  },
  "api/Mawosoft.PowerShell.WindowsSearchManager.SearchRootInfo.html": {
    "href": "api/Mawosoft.PowerShell.WindowsSearchManager.SearchRootInfo.html",
    "title": "Class SearchRootInfo | Windows Search Manager",
    "keywords": "Class SearchRootInfo Contains information about a search root in a search catalog. Inheritance object SearchRootInfo Implements ICloneable Namespace: Mawosoft.PowerShell.WindowsSearchManager Assembly: Mawosoft.PowerShell.WindowsSearchManager.dll Syntax public sealed class SearchRootInfo : ICloneable Constructors SearchRootInfo() Initializes a new instance of the SearchRootInfo class. Declaration public SearchRootInfo() Properties AuthenticationType Declaration public _AUTH_TYPE AuthenticationType { get; set; } Property Value Type Description _AUTH_TYPE One of the enumeration values indicating the authentication type needed to access this search root. EnumerationDepth Declaration public uint EnumerationDepth { get; set; } Property Value Type Description uint The enumeration depth of this search root. FollowDirectories Declaration public bool FollowDirectories { get; set; } Property Value Type Description bool true if the search engine should follow subdirectories and hierarchical scopes for this search root, false otherwise. HostDepth Declaration public uint HostDepth { get; set; } Property Value Type Description uint The host depth of this search root. IsHierarchical Declaration public bool IsHierarchical { get; set; } Property Value Type Description bool true if this search root is hierarchical, false otherwise. Path Declaration public string? Path { get; set; } Property Value Type Description string The root URL of this search root. ProvidesNotifications Declaration public bool ProvidesNotifications { get; set; } Property Value Type Description bool true if this search root provides notifications, false otherwise. UseNotificationsOnly Declaration public bool UseNotificationsOnly { get; set; } Property Value Type Description bool true if this search root should be indexed only by notification and not crawled, false otherwise. Methods Clone() Creates a shallow copy of the SearchRootInfo instance. Declaration public object Clone() Returns Type Description object A shallow copy of the SearchRootInfo instance. Implements ICloneable"
  },
  "api/Mawosoft.PowerShell.WindowsSearchManager.SearchRuleInfo.SearchRuleSet.html": {
    "href": "api/Mawosoft.PowerShell.WindowsSearchManager.SearchRuleInfo.SearchRuleSet.html",
    "title": "Enum SearchRuleInfo.SearchRuleSet | Windows Search Manager",
    "keywords": "Enum SearchRuleInfo.SearchRuleSet Specifies the rule set a search rule belongs to. Namespace: Mawosoft.PowerShell.WindowsSearchManager Assembly: Mawosoft.PowerShell.WindowsSearchManager.dll Syntax public enum SearchRuleInfo.SearchRuleSet Fields Name Description Default The search rule belongs to the default scope. User The search rule belongs to the user scope."
  },
  "api/Mawosoft.PowerShell.WindowsSearchManager.SearchRuleInfo.SearchRuleType.html": {
    "href": "api/Mawosoft.PowerShell.WindowsSearchManager.SearchRuleInfo.SearchRuleType.html",
    "title": "Enum SearchRuleInfo.SearchRuleType | Windows Search Manager",
    "keywords": "Enum SearchRuleInfo.SearchRuleType Specifies the type of a search rule. Namespace: Mawosoft.PowerShell.WindowsSearchManager Assembly: Mawosoft.PowerShell.WindowsSearchManager.dll Syntax public enum SearchRuleInfo.SearchRuleType Fields Name Description Exclude The rule excludes items from indexing. Include The rule includes items into the index."
  },
  "api/Mawosoft.PowerShell.WindowsSearchManager.SearchRuleInfo._FOLLOW_FLAGS.html": {
    "href": "api/Mawosoft.PowerShell.WindowsSearchManager.SearchRuleInfo._FOLLOW_FLAGS.html",
    "title": "Enum SearchRuleInfo._FOLLOW_FLAGS | Windows Search Manager",
    "keywords": "Enum SearchRuleInfo._FOLLOW_FLAGS Specifies whether to follow complex URLs and whether a URL is to be indexed or just followed. Namespace: Mawosoft.PowerShell.WindowsSearchManager Assembly: Mawosoft.PowerShell.WindowsSearchManager.dll Syntax [Flags] public enum SearchRuleInfo._FOLLOW_FLAGS Fields Name Description FF_INDEXCOMPLEXURLS Complex URLs should be indexed. FF_SUPPRESSINDEXING Follow but do not index this URL."
  },
  "api/Mawosoft.PowerShell.WindowsSearchManager.SearchRuleInfo.html": {
    "href": "api/Mawosoft.PowerShell.WindowsSearchManager.SearchRuleInfo.html",
    "title": "Class SearchRuleInfo | Windows Search Manager",
    "keywords": "Class SearchRuleInfo Contains information about a search rule in a search catalog. Inheritance object SearchRuleInfo Implements ICloneable Namespace: Mawosoft.PowerShell.WindowsSearchManager Assembly: Mawosoft.PowerShell.WindowsSearchManager.dll Syntax public sealed class SearchRuleInfo : ICloneable Constructors SearchRuleInfo() Initializes a new instance of the SearchRuleInfo class. Declaration public SearchRuleInfo() Properties FollowFlags Declaration public SearchRuleInfo._FOLLOW_FLAGS FollowFlags { get; set; } Property Value Type Description SearchRuleInfo._FOLLOW_FLAGS A combination of enumeration values to indicate whether to follow complex URLs and whether a URL is to be indexed or just followed. Path Declaration public string? Path { get; set; } Property Value Type Description string The URL, path, or pattern of this search rule. RuleSet Declaration public SearchRuleInfo.SearchRuleSet RuleSet { get; set; } Property Value Type Description SearchRuleInfo.SearchRuleSet One of the enumeration values indicating whether this is a user scope or default scope rule. RuleType Declaration public SearchRuleInfo.SearchRuleType RuleType { get; set; } Property Value Type Description SearchRuleInfo.SearchRuleType One of the enumeration values indicating whether this is an inclusion or exclusion rule. Methods Clone() Creates a shallow copy of the SearchRuleInfo instance. Declaration public object Clone() Returns Type Description object A shallow copy of the SearchRuleInfo instance. Implements ICloneable"
  },
  "api/Mawosoft.PowerShell.WindowsSearchManager.TestSearchRuleInfo.html": {
    "href": "api/Mawosoft.PowerShell.WindowsSearchManager.TestSearchRuleInfo.html",
    "title": "Class TestSearchRuleInfo | Windows Search Manager",
    "keywords": "Class TestSearchRuleInfo Contains the detailed result of testing a path against the search rules of a search catalog. Inheritance object TestSearchRuleInfo Implements ICloneable Namespace: Mawosoft.PowerShell.WindowsSearchManager Assembly: Mawosoft.PowerShell.WindowsSearchManager.dll Syntax public sealed class TestSearchRuleInfo : ICloneable Constructors TestSearchRuleInfo() Initializes a new instance of the TestSearchRuleInfo class. Declaration public TestSearchRuleInfo() Properties HasChildScope Declaration public bool HasChildScope { get; set; } Property Value Type Description bool true if the path has a child scope, false otherwise. HasParentScope Declaration public bool HasParentScope { get; set; } Property Value Type Description bool true if the path has a parent scope, false otherwise. IsIncluded Declaration public bool IsIncluded { get; set; } Property Value Type Description bool true if the path is included in the index, false otherwise. ParentScopeVersiondId Declaration public int ParentScopeVersiondId { get; set; } Property Value Type Description int The parent scope version ID. Path Declaration public string? Path { get; set; } Property Value Type Description string The path that has been tested. Reason Declaration public CLUSION_REASON Reason { get; set; } Property Value Type Description CLUSION_REASON One of the enumeration values indicating the reason why a path is included or excluded. Methods Clone() Creates a shallow copy of the TestSearchRuleInfo instance. Declaration public object Clone() Returns Type Description object A shallow copy of the TestSearchRuleInfo instance. Implements ICloneable"
  },
  "api/Mawosoft.PowerShell.WindowsSearchManager.html": {
    "href": "api/Mawosoft.PowerShell.WindowsSearchManager.html",
    "title": "Namespace Mawosoft.PowerShell.WindowsSearchManager | Windows Search Manager",
    "keywords": "Namespace Mawosoft.PowerShell.WindowsSearchManager Classes SearchCatalogInfo Contains settings and status for a search catalog. SearchManagerInfo Contains the global settings and version information for Windows Search. SearchRootInfo Contains information about a search root in a search catalog. SearchRuleInfo Contains information about a search rule in a search catalog. TestSearchRuleInfo Contains the detailed result of testing a path against the search rules of a search catalog. Enums SearchRuleInfo.SearchRuleSet Specifies the rule set a search rule belongs to. SearchRuleInfo.SearchRuleType Specifies the type of a search rule. SearchRuleInfo._FOLLOW_FLAGS Specifies whether to follow complex URLs and whether a URL is to be indexed or just followed."
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "",
    "keywords": ""
  },
  "index.html": {
    "href": "index.html",
    "title": "Home | Windows Search Manager",
    "keywords": "Windows Search Manager Reference GitHub PS Gallery A PowerShell Module"
  },
  "reference/Add-SearchRoot.html": {
    "href": "reference/Add-SearchRoot.html",
    "title": "Add-SearchRoot | Windows Search Manager",
    "keywords": "Add-SearchRoot Adds search roots to a search catalog. Syntax Add-SearchRoot [-Path] <String[]> [-Catalog <String>] [-WhatIf] [-Confirm] [<CommonParameters>] Add-SearchRoot -InputObject <SearchRootInfo[]> [-Catalog <String>] [-WhatIf] [-Confirm] [<CommonParameters>] Description The Add-SearchRoot cmdlet adds search roots to a search catalog. Examples Example 1: Add a search root Add-SearchRoot -Path file:///D:\\ This command adds the drive D: as a search root to the default Windows Search catalog. For file system search roots, you can omit the file:/// protocol prefix. Parameters -Catalog Specifies the name of the catalog this cmdlet operates on. If omitted, this is the default Windows Search catalog, named SystemIndex. Type string Position Named Default value SystemIndex Accept pipeline input False Accept wildcard characters False -InputObject Specifies SearchRootInfo objects containing search roots with advanced properties to be added to a search catalog. Type SearchRootInfo[] Position Named Default value None Accept pipeline input True (ByValue) Accept wildcard characters False -Path Specifies a search root to be added to a search catalog. Type string[] Position 0 Default value None Accept pipeline input True (ByValue) Accept wildcard characters False Inputs string[] You can pipe paths to this cmdlet. SearchRootInfo[] You can pipe SearchRootInfo objects to this cmdlet. Outputs None This cmdlet returns no output. Notes To learn more about search roots, see Managing Search Roots in Microsoft's Windows Search documentation. Related Links Get-SearchRoot Remove-SearchRoot"
  },
  "reference/Add-SearchRule.html": {
    "href": "reference/Add-SearchRule.html",
    "title": "Add-SearchRule | Windows Search Manager",
    "keywords": "Add-SearchRule Adds search rules to a search catalog. Syntax Add-SearchRule [-Path] <String[]> [-RuleType] <SearchRuleType> [[-RuleSet] <SearchRuleSet>] [-OverrideChildren] [-Catalog <String>] [-WhatIf] [-Confirm] [<CommonParameters>] Add-SearchRule -InputObject <SearchRuleInfo[]> [-OverrideChildren] [-Catalog <String>] [-WhatIf] [-Confirm] [<CommonParameters>] Description The Add-SearchRule cmdlet adds search rules to a search catalog. Examples Example 1: Add search rules Add-SearchRule -Path file:///C:\\Users\\Bob\\Documents\\FooData\\ -RuleType Exclude -RuleSet User Add-SearchRule -Path file:///C:\\Users\\Bob\\Documents\\FooData\\Common\\ -RuleType Include -RuleSet User The first command adds a user exclusion rule to the default Windows Search catalog. The FooData directory and all its subdirectories are excluded from the catalog. The second command amends the exclusion by making an exception for one subdirectory. The subdirectory Common is included in the catalog, all other subdirectories of FooData are still excluded. If the specified path is recognizable as a file system path, you can omit the file:/// protocol prefix. Example 2: Override child rules Add-SearchRule -Path file:///C:\\Users\\Bob\\Documents\\FooData\\ -RuleType Exclude -RuleSet User -OverrideChildren This command adds a user exclusion rule to the default Windows Search catalog. The FooData directory and all its subdirectories are excluded from the catalog, any existing child rules are removed. Without the OverrideChildren parameter, child rules, like the one for the subdirectory Common in Example 1, would remain active. Example 3: Use wildcards in exclusion rules Add-SearchRule -Path file:///C:\\Users\\*\\Documents\\PowerShell\\ -RuleType Exclude -RuleSet Default This command adds a default exclusion rule to the default Windows Search catalog. The PowerShell subdirectory in the Documents directory of every user is excluded from the catalog. Parameters -Catalog Specifies the name of the catalog this cmdlet operates on. If omitted, this is the default Windows Search catalog, named SystemIndex. Type string Position Named Default value SystemIndex Accept pipeline input False Accept wildcard characters False -InputObject Specifies SearchRuleInfo objects containing search rules with their properties to be added to a search catalog. Type SearchRuleInfo[] Position Named Default value None Accept pipeline input True (ByValue) Accept wildcard characters False -OverrideChildren Use this parameter to remove any child rules when adding a user search rule. Type SwitchParameter Position Named Default value None Accept pipeline input False Accept wildcard characters False -Path Specifies the URL or path of the search rule to be added to a search catalog. For exclusion rules, the path can contain the wildcard character *. Type string[] Position 0 Default value None Accept pipeline input True (ByValue) Accept wildcard characters False -RuleSet Specifies the rule set the rule belongs to. The acceptable values for this parameter are: User - Adds a user rule to the working rule set. Default - Adds a default rule to both the working rule set and the default rule set. Type SearchRuleInfo.SearchRuleSet Accepted values User, Default Position 2 Default value User Accept pipeline input False Accept wildcard characters False -RuleType Specifies the type of the rule. The acceptable values for this parameter are: Exclude - The rule specifies an exclusion. Include - The rule specifies an inclusion. Type SearchRuleInfo.SearchRuleType Accepted values Exclude, Include Position 1 Default value None Accept pipeline input False Accept wildcard characters False Inputs string[] You can pipe paths to this cmdlet. SearchRuleInfo[] You can pipe SearchRuleInfo objects to this cmdlet. Outputs None This cmdlet returns no output. Notes To learn more about search rules, see Managing Scope Rules in Microsoft's Windows Search documentation. Related Links Get-SearchRule Remove-SearchRule Reset-SearchRule Test-SearchRule"
  },
  "reference/Get-SearchCatalog.html": {
    "href": "reference/Get-SearchCatalog.html",
    "title": "Get-SearchCatalog | Windows Search Manager",
    "keywords": "Get-SearchCatalog Gets settings and status of all search catalogs or for a specified one. Syntax Get-SearchCatalog [[-Catalog] <String>] [<CommonParameters>] Description The Get-SearchCatalog cmdlet gets settings and status of all search catalogs or for a specified one. Examples Example 1: Get settings for all search catalogs Get-SearchCatalog Catalog : SystemIndex ConnectTimeout : 0 DataTimeout : 0 DiacriticSensitivity : False Status : CATALOG_STATUS_PROCESSING_NOTIFICATIONS PausedReason : CATALOG_PAUSED_REASON_NONE ItemCount : 23930 ItemsToIndexCount : 0 NotificationQueueCount : 47 HighPriorityQueueCount : 0 PathBeingIndexed : file:C:/Users/Bob/Documents/foo.txt While it is possible to create, manage, and query multiple catalogs, Windows Search currently uses only one catalog, which is named SystemIndex. Example 2: Get settings for a specific catalog Get-SearchCatalog -Catalog SystemIndex Parameters -Catalog Specifies the name of the catalog to return information about. If omitted, settings and status of all search catalogs are returned. Type string Position 0 Default value None Accept pipeline input False Accept wildcard characters False Inputs None You can't pipe objects to this cmdlet. Outputs SearchCatalogInfo This cmdlet returns one or more SearchCatalogInfo objects. Related Links New-SearchCatalog Remove-SearchCatalog Reset-SearchCatalog Set-SearchCatalog Update-SearchCatalog"
  },
  "reference/Get-SearchManager.html": {
    "href": "reference/Get-SearchManager.html",
    "title": "Get-SearchManager | Windows Search Manager",
    "keywords": "Get-SearchManager Gets global settings and version information for Windows Search. Syntax Get-SearchManager [<CommonParameters>] Description The Get-SearchManager cmdlet gets the global settings and version information for Windows Search. Note You must run this cmdlet from an elevated PowerShell session. Start PowerShell by using the Run as administrator option. Examples Example 1: Get global Windows Search settings Get-SearchManager Version : 10.0.19041.3324 MajorVersion : 10 MinorVersion : 0 UserAgent : Mozilla/4.0 (compatible; MSIE 6.0; Windows NT; MS Search 4.0 Robot) ProxyAccess : PROXY_ACCESS_PRECONFIG ProxyName : ProxyPortNumber : 0 ProxyBypassLocal : False ProxyBypassList : Inputs None You can't pipe objects to this cmdlet. Outputs SearchManagerInfo This cmdlet returns a SearchManagerInfo object. Related Links Set-SearchManager"
  },
  "reference/Get-SearchRoot.html": {
    "href": "reference/Get-SearchRoot.html",
    "title": "Get-SearchRoot | Windows Search Manager",
    "keywords": "Get-SearchRoot Gets all search roots defined for a search catalog. Syntax Get-SearchRoot [[-Catalog] <String>] [-PathOnly] [<CommonParameters>] Description The Get-SearchRoot cmdlet gets all search roots defined for a search catalog. Examples Example 1: Get all search roots paths Get-SearchRoot -PathOnly csc://{S-1-5-21-3419697060-3810377854-678604692-1001}/ defaultroot://{S-1-5-21-3419697060-3810377854-678604692-1001}/ file:///C:\\ iehistory://{S-1-5-21-3419697060-3810377854-678604692-1001}/ winrt://{S-1-5-21-3419697060-3810377854-678604692-1001}/ This command gets the search root paths for the default Windows Search catalog. Example 2: Get detailed infos for all search roots paths Get-SearchRoot Path : csc://{S-1-5-21-3419697060-3810377854-678604692-1001}/ IsHierarchical : True ProvidesNotifications : True UseNotificationsOnly : False EnumerationDepth : 4294967295 HostDepth : 0 FollowDirectories : True AuthenticationType : eAUTH_TYPE_ANONYMOUS Path : defaultroot://{S-1-5-21-3419697060-3810377854-678604692-1001}/ IsHierarchical : True ... output truncated ... This command gets the search root details for the default Windows Search catalog. Parameters -Catalog Specifies the name of the catalog this cmdlet operates on. If omitted, this is the default Windows Search catalog, named SystemIndex. Type string Position 0 Default value SystemIndex Accept pipeline input False Accept wildcard characters False -PathOnly Use this parameter to return only the paths of the search roots, not the details. Type SwitchParameter Position Named Default value None Accept pipeline input False Accept wildcard characters False Inputs None You can't pipe objects to this cmdlet. Outputs SearchRootInfo By default, this cmdlet returns SearchRootInfo objects. string When you use the PathOnly parameter, the cmdlet returns the root paths. Notes To learn more about search roots, see Managing Search Roots in Microsoft's Windows Search documentation. Related Links Add-SearchRoot Remove-SearchRoot"
  },
  "reference/Get-SearchRule.html": {
    "href": "reference/Get-SearchRule.html",
    "title": "Get-SearchRule | Windows Search Manager",
    "keywords": "Get-SearchRule Gets the search rules in effect for a search catalog. Syntax Get-SearchRule [[-Catalog] <String>] [<CommonParameters>] Description The Get-SearchRule cmdlet gets the search rules in effect for a search catalog. Examples Example 1: Get search rules Get-SearchRule Path RuleType RuleSet FollowFlags ---- -------- ------- ----------- csc://{S-1-5-21-3419697060-3810377854-678604692-1001}/ Include Default FF_INDEXCOMPLEXURLS file:///*\\$RECYCLE.BIN\\ Exclude Default FF_INDEXCOMPLEXURLS file:///*\\DfsrPrivate\\ Exclude Default FF_INDEXCOMPLEXURLS file:///*\\System Volume Information\\ Exclude Default FF_INDEXCOMPLEXURLS file:///C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\ Include Default FF_INDEXCOMPLEXURLS file:///C:\\Users\\ Include Default FF_INDEXCOMPLEXURLS file:///C:\\Users\\*\\AppData\\ Exclude Default FF_INDEXCOMPLEXURLS file:///C:\\Users\\Bob\\.*\\ Exclude Default FF_INDEXCOMPLEXURLS file:///C:\\Users\\Bob\\Documents\\FooData\\ Exclude User FF_INDEXCOMPLEXURLS file:///C:\\Users\\Bob\\Documents\\FooData\\Common\\ Include User FF_INDEXCOMPLEXURLS file:///C:\\Windows.*\\ Exclude Default FF_INDEXCOMPLEXURLS file:///C:\\Windows\\*\\temp\\ Exclude Default FF_INDEXCOMPLEXURLS iehistory://{S-1-5-21-3419697060-3810377854-678604692-1001}/ Include Default FF_INDEXCOMPLEXURLS winrt://{S-1-5-21-3419697060-3810377854-678604692-1001}/ Include Default FF_INDEXCOMPLEXURLS This command gets the search rules in effect for the default Windows Search catalog. Parameters -Catalog Specifies the name of the catalog this cmdlet operates on. If omitted, this is the default Windows Search catalog, named SystemIndex. Type string Position 0 Default value SystemIndex Accept pipeline input False Accept wildcard characters False Inputs None You can't pipe objects to this cmdlet. Outputs SearchRuleInfo This cmdlet returns SearchRuleInfo objects. Notes To learn more about search rules, see Managing Scope Rules in Microsoft's Windows Search documentation. Related Links Add-SearchRule Remove-SearchRule Reset-SearchRule Test-SearchRule"
  },
  "reference/New-SearchCatalog.html": {
    "href": "reference/New-SearchCatalog.html",
    "title": "New-SearchCatalog | Windows Search Manager",
    "keywords": "New-SearchCatalog Creates a new search catalog. Syntax New-SearchCatalog [-Catalog] <String> [-WhatIf] [-Confirm] [<CommonParameters>] Description The New-SearchCatalog cmdlet creates a new search catalog with the specified name. Examples Example 1: Create a new catalog New-SearchCatalog -Catalog Sample01 This command creates a new search catalog named Sample01. Parameters -Catalog Specifies the name of the catalog to create. Type string Position 0 Default value None Accept pipeline input False Accept wildcard characters False Inputs None You can't pipe objects to this cmdlet. Outputs None This cmdlet returns no output. Notes While it is possible to create, manage, and query multiple catalogs, Windows Search currently uses only one catalog, which is named SystemIndex. Related Links Get-SearchCatalog Remove-SearchCatalog Reset-SearchCatalog Set-SearchCatalog Update-SearchCatalog"
  },
  "reference/Remove-SearchCatalog.html": {
    "href": "reference/Remove-SearchCatalog.html",
    "title": "Remove-SearchCatalog | Windows Search Manager",
    "keywords": "Remove-SearchCatalog Deletes the specified search catalog. Syntax Remove-SearchCatalog [-Catalog] <String> [-WhatIf] [-Confirm] [<CommonParameters>] Description The Remove-SearchCatalog cmdlet deletes the catalog with the specified name. Examples Example 1: Delete a catalog Remove-SearchCatalog -Catalog Sample01 Confirm Are you sure you want to perform this action? Performing the operation \"Remove-SearchCatalog\" on target \"Sample01\". [Y] Yes [A] Yes to All [N] No [L] No to All [S] Suspend [?] Help (default is \"Y\"): This command deletes the search catalog named Sample01 after prompting the user for confirmation. Example 2: Delete a catalog without confirmation Remove-SearchCatalog -Catalog Sample01 -Confirm:$false This command deletes the search catalog named Sample01 without prompting for confirmation. Parameters -Catalog Specifies the name of the catalog to delete. Type string Position 0 Default value None Accept pipeline input False Accept wildcard characters False Inputs None You can't pipe objects to this cmdlet. Outputs None This cmdlet returns no output. Related Links Get-SearchCatalog New-SearchCatalog Reset-SearchCatalog Set-SearchCatalog Update-SearchCatalog"
  },
  "reference/Remove-SearchRoot.html": {
    "href": "reference/Remove-SearchRoot.html",
    "title": "Remove-SearchRoot | Windows Search Manager",
    "keywords": "Remove-SearchRoot Removes the specified search roots from a search catalog. Syntax Remove-SearchRoot [-Path] <String[]> [-Catalog <String>] [-WhatIf] [-Confirm] [<CommonParameters>] Description The Remove-SearchRoot cmdlet removes the specified search roots from a search catalog. Caution Removing a search root also removes all search rules associated with it. Examples Example 1: Remove a search root Remove-SearchRoot -Path file:///D:\\ Confirm Are you sure you want to perform this action? Performing the operation \"Remove-SearchRoot\" on target \"SystemIndex Path=file:///D:\\\". [Y] Yes [A] Yes to All [N] No [L] No to All [S] Suspend [?] Help (default is \"Y\"): This command removes the search root drive D: from the default Windows Search catalog after prompting the user for confirmation. Example 2: Remove a search root without confirmation Remove-SearchRoot -Path file:///D:\\ -Confirm:$false This command removes the search root drive D: from the default Windows Search catalog without prompting for confirmation. Parameters -Catalog Specifies the name of the catalog this cmdlet operates on. If omitted, this is the default Windows Search catalog, named SystemIndex. Type string Position Named Default value SystemIndex Accept pipeline input False Accept wildcard characters False -Path Specifies the search root to be removed from a catalog. The specified path must match an existing search root exactly, including the protocol prefix. Type string[] Position 0 Default value None Accept pipeline input True (ByPropertyName, ByValue) Accept wildcard characters False Inputs string[] You can pipe paths to this cmdlet. Outputs None This cmdlet returns no output. Notes To learn more about search roots, see Managing Search Roots in Microsoft's Windows Search documentation. Related Links Add-SearchRoot Get-SearchRoot"
  },
  "reference/Remove-SearchRule.html": {
    "href": "reference/Remove-SearchRule.html",
    "title": "Remove-SearchRule | Windows Search Manager",
    "keywords": "Remove-SearchRule Removes the specified search rules from a search catalog. Syntax Remove-SearchRule [-Path] <String[]> [[-RuleSet] <SearchRuleSet>] [-Catalog <String>] [-WhatIf] [-Confirm] [<CommonParameters>] Description The Remove-SearchRule cmdlet removes the specified search rules from a search catalog. Examples Example 1: Remove a search rule Remove-SearchRule -Path file:///C:\\Users\\Bob\\Documents\\FooData\\Common\\ -RuleSet User This command removes the specified user rule from the working rule set of the default Windows Search catalog. Parameters -Catalog Specifies the name of the catalog this cmdlet operates on. If omitted, this is the default Windows Search catalog, named SystemIndex. Type string Position Named Default value SystemIndex Accept pipeline input False Accept wildcard characters False -Path Specifies the search rule to be removed from a catalog. The specified path must match an existing search rule exactly, including the protocol prefix. Type string[] Position 0 Default value None Accept pipeline input True (ByPropertyName, ByValue) Accept wildcard characters False -RuleSet Specifies the rule set the rule belongs to. The acceptable values for this parameter are: User - Removes a user rule from the working rule set. If the user rule is a duplicate of or overrides a default rule, the default rule remains in the working rule set. Default - Removes a default rule from both the working rule set and the default rule set. Type SearchRuleInfo.SearchRuleSet Accepted values User, Default Position 1 Default value User Accept pipeline input True (ByPropertyName) Accept wildcard characters False Inputs string[] You can pipe paths to this cmdlet. Outputs None This cmdlet returns no output. Notes To learn more about search rules, see Managing Scope Rules in Microsoft's Windows Search documentation. Related Links Add-SearchRule Get-SearchRule Reset-SearchRule Test-SearchRule"
  },
  "reference/Reset-SearchCatalog.html": {
    "href": "reference/Reset-SearchCatalog.html",
    "title": "Reset-SearchCatalog | Windows Search Manager",
    "keywords": "Reset-SearchCatalog Resets a search catalog by completely rebuilding its index database. Syntax Reset-SearchCatalog [[-Catalog] <String>] [-WhatIf] [-Confirm] [<CommonParameters>] Description The Reset-SearchCatalog cmdlet resets a search catalog by completely rebuilding its index database. Note You must run this cmdlet from an elevated PowerShell session. Start PowerShell by using the Run as administrator option. Examples Example 1: Reset the default catalog. Reset-SearchCatalog This command resets the default Windows Search catalog, which is named SystemIndex. Example 2: Reset a custom catalog. Reset-SearchCatalog -Catalog Sample01 This command resets the search catalog named Sample01. Parameters -Catalog Specifies the name of the catalog this cmdlet operates on. If omitted, this is the default Windows Search catalog, named SystemIndex. Type string Position 0 Default value SystemIndex Accept pipeline input False Accept wildcard characters False Inputs None You can't pipe objects to this cmdlet. Outputs None This cmdlet returns no output. Notes The difference between Reset-SearchCatalog and Update-SearchCatalog -All is that the former removes any old information from the index before reindexing while the latter doesn't. Related Links Get-SearchCatalog New-SearchCatalog Remove-SearchCatalog Set-SearchCatalog Update-SearchCatalog"
  },
  "reference/Reset-SearchRule.html": {
    "href": "reference/Reset-SearchRule.html",
    "title": "Reset-SearchRule | Windows Search Manager",
    "keywords": "Reset-SearchRule Resets a catalog to the default search rules. Syntax Reset-SearchRule [[-Catalog] <String>] [-WhatIf] [-Confirm] [<CommonParameters>] Description The Reset-SearchRule cmdlet removes all User rules from a catalog and restores all Default rules to the working rule set. Examples Example 1: Reset search rules Reset-SearchRule Confirm Are you sure you want to perform this action? Performing the operation \"Reset-SearchRule\" on target \"SystemIndex\". [Y] Yes [A] Yes to All [N] No [L] No to All [S] Suspend [?] Help (default is \"Y\"): This command resets the search rules of the default Windows Search catalog after prompting the user for confirmation. Example 2: Reset search rules without confirmation Reset-SearchRule -Confirm:$false This command resets the search rules of the default Windows Search catalog without prompting for confirmation. Parameters -Catalog Specifies the name of the catalog this cmdlet operates on. If omitted, this is the default Windows Search catalog, named SystemIndex. Type string Position 0 Default value SystemIndex Accept pipeline input False Accept wildcard characters False Inputs None You can't pipe objects to this cmdlet. Outputs None This cmdlet returns no output. Notes To learn more about search rules, see Managing Scope Rules in Microsoft's Windows Search documentation. Related Links Add-SearchRule Get-SearchRule Remove-SearchRule Test-SearchRule"
  },
  "reference/Set-SearchCatalog.html": {
    "href": "reference/Set-SearchCatalog.html",
    "title": "Set-SearchCatalog | Windows Search Manager",
    "keywords": "Set-SearchCatalog Changes settings for a search catalog. Syntax Set-SearchCatalog [-ConnectTimeout <UInt32>] [-DataTimeout <UInt32>] [-DiacriticSensitivity] [-Catalog <String>] [-WhatIf] [-Confirm] [<CommonParameters>] Description The Set-SearchCatalog cmdlet changes settings for a search catalog. Examples Example 1: Enable diacritic sensitivity Set-SearchCatalog -DiacriticSensitivity This command enables diacritic sensitivity for the default Windows Search catalog. Example 2: Disable diacritic sensitivity Set-SearchCatalog -DiacriticSensitivity:$false This command disables diacritic sensitivity for the default Windows Search catalog. Parameters -Catalog Specifies the name of the catalog this cmdlet operates on. If omitted, this is the default Windows Search catalog, named SystemIndex. Type string Position Named Default value SystemIndex Accept pipeline input False Accept wildcard characters False -ConnectTimeout Specifies the time, in seconds, that the indexer should wait for a connection response from a server or data store. Note This parameter has currently no effect in Windows Search. Type uint Position Named Default value None Accept pipeline input False Accept wildcard characters False -DataTimeout Specifies the time, in seconds, that the indexer should wait for a data transaction. Note This parameter has currently no effect in Windows Search. Type uint Position Named Default value None Accept pipeline input False Accept wildcard characters False -DiacriticSensitivity Enables diacritic sensitivity. When enabled, the catalog treats words like resume and resumé as different. When disabled, the catalog treats them as if they were the same word. To disable diacritic sensitivity, specify the parameter as follows: -DiacriticSensitivity:$false. Type SwitchParameter Position Named Default value None Accept pipeline input False Accept wildcard characters False Inputs None You can't pipe objects to this cmdlet. Outputs None This cmdlet returns no output. Notes Changing diacritic sensitivity automatically causes the catalog to be reindexed. Related Links Get-SearchCatalog New-SearchCatalog Remove-SearchCatalog Reset-SearchCatalog Update-SearchCatalog"
  },
  "reference/Set-SearchManager.html": {
    "href": "reference/Set-SearchManager.html",
    "title": "Set-SearchManager | Windows Search Manager",
    "keywords": "Set-SearchManager Changes global settings for Windows Search. Syntax Set-SearchManager [-UserAgent <String>] [-ProxyAccess <_PROXY_ACCESS>] [-ProxyName <String>] [-ProxyPortNumber <UInt32>] [-ProxyBypassLocal] [-ProxyBypassList <String[]>] [-WhatIf] [-Confirm] [<CommonParameters>] Description The Set-SearchManager cmdlet changes the global settings of Windows Search across all search catalogs. Note You must run this cmdlet from an elevated PowerShell session. Start PowerShell by using the Run as administrator option. Examples Example 1: Configure a custom proxy server Set-SearchManager -ProxyAccess PROXY_ACCESS_PROXY -ProxyName proxy.foo.org -ProxyPortNumber 8080 This command tells Windows Search to use proxy.foo.org:8080 as the proxy server. Example 2: Configure local addresses to bypass the proxy. Set-SearchManager -ProxyBypassLocal -ProxyBypassList localhost, 127.0.0.1, *.foo.org This command tells Windows Search to bypass the proxy for local addresses and provides a list of those local addresses. Example 3: Use Windows settings Set-SearchManager -ProxyAccess PROXY_ACCESS_PRECONFIG This command tells Windows Search to use the settings as configured in Windows Network & Internet Settings. Parameters -ProxyAccess Specifies if and how a proxy server is used. The acceptable values for this parameter are: PROXY_ACCESS_PRECONFIG - Use the Windows Network & Internet Settings. PROXY_ACCESS_DIRECT - Don't use a proxy. PROXY_ACCESS_PROXY - Use a proxy as specified by the other Proxy... parameters. Type _PROXY_ACCESS Accepted values PROXY_ACCESS_PRECONFIG, PROXY_ACCESS_DIRECT, PROXY_ACCESS_PROXY Position Named Default value None Accept pipeline input False Accept wildcard characters False -ProxyBypassList Specifies, as a string array, the local addresses for which the proxy server should not be used. Use this parameter in conjunction with the ProxyBypassLocal parameter. Type string[] Position Named Default value None Accept pipeline input False Accept wildcard characters False -ProxyBypassLocal Use this parameter to bypass the proxy server for local addresses. Use the ProxyBypassList parameter to specifiy a list of local addresses. Type SwitchParameter Position Named Default value None Accept pipeline input False Accept wildcard characters False -ProxyName Specifies the name of the proxy server. Type string Position Named Default value None Accept pipeline input False Accept wildcard characters False -ProxyPortNumber Specifies the port number of the proxy server. Type uint Position Named Default value None Accept pipeline input False Accept wildcard characters False -UserAgent Specifies the user agent string. Type string Position Named Default value None Accept pipeline input False Accept wildcard characters False Inputs None You can't pipe objects to this cmdlet. Outputs None This cmdlet returns no output. Notes Microsoft's Windows Search documentation states that the settings described above are implemented, but reserved for future use. Related Links Get-SearchManager"
  },
  "reference/Test-SearchRule.html": {
    "href": "reference/Test-SearchRule.html",
    "title": "Test-SearchRule | Windows Search Manager",
    "keywords": "Test-SearchRule Tests specified paths against the search rules of a search catalog. Syntax Test-SearchRule [-Path] <String[]> [-IsIncluded] [-Catalog <String>] [<CommonParameters>] Test-SearchRule [-Path] <String[]> -HasChildScope [-Catalog <String>] [<CommonParameters>] Test-SearchRule [-Path] <String[]> -HasParentScope [-Catalog <String>] [<CommonParameters>] Test-SearchRule [-Path] <String[]> -Detailed [-Catalog <String>] [<CommonParameters>] Description The Test-SearchRule cmdlet tests specified paths against the search rules of a search catalog. Examples Example 1: Test if a path is included Test-SearchRule -Path file:///C:\\Users\\Bob\\Drafts\\ True This command checks if the specified path is included in the default Windows Search catalog. For file system paths, you can omit the file:/// protocol prefix. Example 2: Test a path and get detailed results Test-SearchRule -Path C:\\Users\\Bob\\Drafts\\ -Detailed Path : C:\\Users\\Bob\\Drafts IsIncluded : True Reason : CLUSIONREASON_DEFAULT HasChildScope : True HasParentScope : False ParentScopeVersiondId : 1 This command gets details about the inclusion or exclusion of the specified path. Parameters -Catalog Specifies the name of the catalog this cmdlet operates on. If omitted, this is the default Windows Search catalog, named SystemIndex. Type string Position Named Default value SystemIndex Accept pipeline input False Accept wildcard characters False -Detailed Use this parameter to return detailed results. Type SwitchParameter Position Named Default value None Accept pipeline input False Accept wildcard characters False -HasChildScope Use this parameter to check if the specified path has child search rules. Type SwitchParameter Position Named Default value None Accept pipeline input False Accept wildcard characters False -HasParentScope Use this parameter to check if the specified path has parent search rules. Type SwitchParameter Position Named Default value None Accept pipeline input False Accept wildcard characters False -IsIncluded Use this parameter to check if the specified path is included in the search catalog. Type SwitchParameter Position Named Default value None Accept pipeline input False Accept wildcard characters False -Path Specifies the URL or path to be tested. Type string[] Position 0 Default value None Accept pipeline input True (ByPropertyName, ByValue) Accept wildcard characters False Inputs string[] You can pipe paths to this cmdlet. Outputs bool When you use the IsIncluded, HasChildScope, or HasParentScope parameters, the cmdlet returns a Boolean value for each tested path. TestSearchRuleInfo When you use the Detailed parameter, the cmdlet returns an TestSearchRuleInfo object for each tested path. Notes To learn more about search rules, see Managing Scope Rules in Microsoft's Windows Search documentation. Related Links Add-SearchRule Get-SearchRule Remove-SearchRule Reset-SearchRule"
  },
  "reference/Update-SearchCatalog.html": {
    "href": "reference/Update-SearchCatalog.html",
    "title": "Update-SearchCatalog | Windows Search Manager",
    "keywords": "Update-SearchCatalog Reindexes a search catalog either completely or partially. Syntax Update-SearchCatalog [-All] [-Catalog <String>] [-WhatIf] [-Confirm] [<CommonParameters>] Update-SearchCatalog -RootPath <String[]> [-Catalog <String>] [-WhatIf] [-Confirm] [<CommonParameters>] Update-SearchCatalog [-Path] <String[]> [-Catalog <String>] [-WhatIf] [-Confirm] [<CommonParameters>] Description The Update-SearchCatalog reindexes a search catalog either completely or partially. Examples Example 1: Reindex an entire catalog Update-SearchCatalog -All This command reindexes the entire default Windows Search catalog. Example 2: Reindex a search root. Update-SearchCatalog -RootPath file:///C:\\ This command reindexes the search root drive C: in the default Windows Search catalog. For file system search roots, you can omit the file:/// protocol prefix. Example 3: Reindex matching paths. Update-SearchCatalog -Path file:///C:\\Users\\*\\Documents\\*.docx This command reindexes all Microsoft Word files in and below the Documents folder of all users in the default Windows Search catalog. If the specified path is recognizable as a file system path, you can omit the file:/// protocol prefix. Parameters -All Use this parameter to reindex an entire search catalog. Note To use the All parameter, you must run this cmdlet from an elevated PowerShell session. Start PowerShell by using the Run as administrator option. Type SwitchParameter Position Named Default value None Accept pipeline input False Accept wildcard characters False -Catalog Specifies the name of the catalog this cmdlet operates on. If omitted, this is the default Windows Search catalog, named SystemIndex. Type string Position Named Default value SystemIndex Accept pipeline input False Accept wildcard characters False -Path Use this parameter to specify an URL or path pattern to reindex all matching items. Type string[] Position 0 Default value None Accept pipeline input True (ByPropertyName, ByValue) Accept wildcard characters True -RootPath Use this parameter to specify a search root to be reindexed. Type string[] Position Named Default value None Accept pipeline input True (ByPropertyName) Accept wildcard characters False Inputs string[] You can pipe paths to this cmdlet. Outputs None This cmdlet returns no output. Notes The difference between Reset-SearchCatalog and Update-SearchCatalog -All is that the former removes any old information from the index before reindexing while the latter doesn't. Related Links Get-SearchCatalog New-SearchCatalog Remove-SearchCatalog Reset-SearchCatalog Set-SearchCatalog"
  },
  "reference/index.html": {
    "href": "reference/index.html",
    "title": "Module WindowsSearchManager | Windows Search Manager",
    "keywords": "Module WindowsSearchManager The WindowsSearchManager module contains cmdlets for managing Windows Search. Installation You can install WindowsSearchManager from the PowerShell Gallery. Install-Module -Name WindowsSearchManager Cmdlet groups SearchManager Cmdlets for managing global Windows Search settings across catalogs. Get-SearchManager Gets global settings and version information for Windows Search. Set-SearchManager Changes global settings for Windows Search. SearchCatalog Cmdlets for managing search catalogs. Search catalogs are content indexes. Get-SearchCatalog Gets settings and status of all search catalogs or for a specified one. New-SearchCatalog Creates a new search catalog. Remove-SearchCatalog Deletes the specified search catalog. Reset-SearchCatalog Resets a search catalog by completely rebuilding its index database. Set-SearchCatalog Changes settings for a search catalog. Update-SearchCatalog Reindexes a search catalog either completely or partially. SearchRoot Cmdlets for managing search roots. Search roots are the content stores indexed in a catalog. Add-SearchRoot Adds search roots to a search catalog. Get-SearchRoot Gets all search roots defined for a search catalog. Remove-SearchRoot Removes the specified search roots from a search catalog. SearchRule Cmdlets for managing search rules. Search rules define which items in a content store are indexed. Add-SearchRule Adds search rules to a search catalog. Get-SearchRule Gets the search rules in effect for a search catalog. Remove-SearchRule Removes the specified search rules from a search catalog. Reset-SearchRule Resets a catalog to the default search rules. Test-SearchRule Tests specified paths against the search rules of a search catalog. See also Microsoft's Windows Search documentation"
  }
}