<?xml version="1.0" encoding="utf-8"?>
<!--
  Copyright (c) 2023 Matthias Wolf, Mawosoft.
-->
<Project>

  <Import Project="Sdk.props" Sdk="Microsoft.NET.Sdk" />

  <PropertyGroup>
    <TargetFramework>netstandard2.0</TargetFramework>
    <NeutralLanguage>en-US</NeutralLanguage>
    <GenerateDocumentationFile>true</GenerateDocumentationFile>
    <GenerateDependencyFile>false</GenerateDependencyFile>
    <!-- CS1591  Missing XML comment... Reason: Command help is generated via other means.
         MSB3270 Processor architecture mismatch. Reason: interop.searchapi.dll only has processor-specific flavors,
                 but we only use it to embed the interop types, in which case architecture doesn't matter.
    -->
    <NoWarn>$(NoWarn);CS1591;MSB3270</NoWarn>
  </PropertyGroup>

  <PropertyGroup>
    <Description>Powershell module for managing Windows Search.</Description>
    <RepositoryType>git</RepositoryType>
    <RepositoryUrl>https://github.com/mawosoft/WindowsSearchManager</RepositoryUrl>
    <DebugType>embedded</DebugType>
    <EmbedUntrackedSources>true</EmbedUntrackedSources>
    <EnablePackageValidation>false</EnablePackageValidation>
  </PropertyGroup>

  <ItemGroup>
    <EmbeddedResource Update="resources\SR.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <CustomToolNamespace>$(RootNamespace)</CustomToolNamespace>
      <LastGenOutput>SR.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Update="resources\SR.Designer.cs">
      <DesignTime>True</DesignTime>
      <AutoGen>True</AutoGen>
      <DependentUpon>SR.resx</DependentUpon>
    </Compile>
  </ItemGroup>

  <ItemGroup>
    <!-- Exclude the help project when building for a help update via platyPS because of code changes. -->
    <ProjectReference Condition="'$(NoMamlHelp)' != 'true'"
                      Include="../../docs/help/help.msbuildproj"
                      ReferenceOutputAssembly="false"
                      SkipGetTargetFrameworkProperties="true" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.Win32.Registry" PrivateAssets="All" />
    <PackageReference Include="PowerShellStandard.Library" PrivateAssets="All" />
    <Reference Include="Interop.SearchAPI" HintPath="$(InteropSearchApiAssemblyPath)" EmbedInteropTypes="true" Private="false" />
  </ItemGroup>

  <ItemGroup>
    <InternalsVisibleTo Include="$(AssemblyName).Tests" />
  </ItemGroup>

  <!--
    ============================================================

    Handle PowerShell-specific files, e.g. module manifest

    Use the PSModuleManifest item to specify the module manifest template.
    The template should contain the placeholders @ModuleVersion@ and @Prerelease@ to be
    replaced with a PS-compatible variant of the $(Version) property. The resulting manifest
    will be written to the $(IntermediateOutputPath)

    Use the PSAdditionalFiles item to include any other files like type or format definitions
    that should be part of the PS module.
    ============================================================
  -->

  <PropertyGroup>
    <!-- This is used as the source for Pack via Publish-Module and therefore must match the module name. -->
    <PublishDirName>$(PSModuleName)</PublishDirName>
    <!-- Forwarded as switch parameter -->
    <SkipAutomaticTags Condition="'$(SkipAutomaticTags)' == ''">true</SkipAutomaticTags>
    <SkipAutomaticTags Condition="'$(SkipAutomaticTags)' != 'true'">false</SkipAutomaticTags>
  </PropertyGroup>

  <ItemGroup>
    <PSModuleManifest Include="$(PSModuleName).psd1" />
    <PSAdditionalFiles Include="*.ps1xml" />
  </ItemGroup>

  <ItemGroup>
    <PSModuleManifest Update="@(PSModuleManifest)">
      <SourceItemSpec>%(Identity)</SourceItemSpec>
    </PSModuleManifest>
    <PSAdditionalFiles Remove="@(PSModuleManifest)" />
    <PSAdditionalFiles Include="@(PSModuleManifest->'$(IntermediateOutputPath)%(FileName)%(Extension)')">
      <TargetPath>%(FileName)%(Extension)</TargetPath>
      <Link>(hidden)</Link>
      <Visible>false</Visible>
      <!-- Alternatively:
      <Link>%(SourceItemSpec) (generated)</Link>
      <DependentUpon>%(SourceItemSpec)</DependentUpon>
      -->
    </PSAdditionalFiles>
    <PSAdditionalFiles Update="@(PSAdditionalFiles)">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
      <Pack>true</Pack>
    </PSAdditionalFiles>
    <None Remove="@(PSAdditionalFiles)" />
    <None Include="@(PSAdditionalFiles)" />
  </ItemGroup>

  <Target Name="UpdatePSModuleManifest"
          Inputs="@(PSModuleManifest);@(IntermediateAssembly)"
          Outputs="$(IntermediateOutputPath)%(PSModuleManifest.FileName)%(PSModuleManifest.Extension)"
          AfterTargets="Compile"
          DependsOnTargets="Compile"
          Condition="Exists('@(IntermediateAssembly)')">
    <PropertyGroup>
      <_command>pwsh -NonInteractive -NoProfile -ExecutionPolicy Bypass -Command &quot;&amp;
        '../../build/updatePSModuleManifestVersion.ps1'
          -Path '%(PSModuleManifest.FullPath)'
          -Destination '$(IntermediateOutputPath)'
          -Version '$(Version)'
        &quot;
      </_command>
    </PropertyGroup>
    <Exec Command="$(_command.Replace('%0D%0A', ' ').Replace('%0A', ' '))"
          WorkingDirectory = "$(MSBuildProjectDirectory)"
          StandardErrorImportance="high"
          StandardOutputImportance="low" />
    <ItemGroup>
      <FileWrites Include="$(IntermediateOutputPath)%(PSModuleManifest.FileName)%(PSModuleManifest.Extension)" />
    </ItemGroup>
  </Target>

  <Import Project="Sdk.targets" Sdk="Microsoft.NET.Sdk" />

  <!--
    ============================================================

    Pack

    Overwritten to generate a PSGallery-compatible NuGet package.
    TODO (Pack)
    - Inputs/Outputs to avoid running this every time.
    ============================================================
  -->

  <Target Name="Pack"
          DependsOnTargets="Publish">
    <PropertyGroup>
      <_command>pwsh -NonInteractive -NoProfile -ExecutionPolicy Bypass -Command &quot;&amp;
        '../../build/packPSModule.ps1'
          -Path '$(PublishDir)'
          -Destination '$(PackageOutputPath)'
          -SkipAutomaticTags:$$(SkipAutomaticTags)
        &quot;
      </_command>
    </PropertyGroup>
    <Exec Command="$(_command.Replace('%0D%0A', ' ').Replace('%0A', ' '))"
          WorkingDirectory = "$(MSBuildProjectDirectory)"
          StandardErrorImportance="high"
          StandardOutputImportance="low" />
  </Target>

</Project>
